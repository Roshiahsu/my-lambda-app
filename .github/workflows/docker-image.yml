name: Build and Deploy with OIDC

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: AWS
    permissions:
      id-token: write
      contents: read

    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-3.amazonaws.com/my-lambda-image
      DEPLOY_TO_LAMBDA: ${{ vars.DEPLOY_TO_LAMBDA || 'false' }}
      DOCKER_BUILD: ${{ vars.DOCKER_BUILD || 'false' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-pipeline
          aws-region: ap-northeast-3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Set up Java
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '8'
#
#      - name: Build with Maven
#        run: mvn clean package

      - name: Build and Push Docker image
        if : ${{ env.DOCKER_BUILD }} == 'true'
        run: |
          echo ${{ env.DOCKER_BUILD }}
          echo "run Build and Push Docker image"
#          docker build -t ${{ env.ECR_REPO }}:latest .
#          docker push ${{ env.ECR_REPO }}:latest

      - name: Deploy to Lambda
        if: ${{ env.DEPLOY_TO_LAMBDA }} == 'true'
        run: |
          echo ${{ env.DEPLOY_TO_LAMBDA }}
          echo "Deploy to Lambda"
#          aws lambda update-function-code \
#            --function-name github_pipeline_docker_Img \
#            --image-uri ${{ env.ECR_REPO }}:latest
