name: Build and Deploy with OIDC ,Docker Img

on:
  push:
    branches:
      - yml-test

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: AWS
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REPO: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-3.amazonaws.com/my-lambda-image
      BUILD_TYPE: ${{ vars.BUILD_TYPE }}

    #if: ${{ env.BUILD_TYPE == 'docker' }}

    steps:
      - name: Debug Variables
        run: |
            echo "BUILD_TYPE: ${{ env.BUILD_TYPE }}"
            echo "AWS_REGION: ${{ vars.AWS_REGION }}"
            echo "ECR_REPO: ${{ env.ECR_REPO }}"
            echo "aws_role: $${{ secrets.AWS_ROLE }}"
      ##build-and-test flow start
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 減少簽出時間,拉取最新的單個 commit

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Download JaCoCo Agent
        run: |
          wget https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.13/org.jacoco.agent-0.8.13-runtime.jar -O jacocoagent.jar
          wget https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.13/org.jacoco.cli-0.8.13-nodeps.jar -O jacococli.jar

      - name: Run Tests with JaCoCo Agent
        run: |
            mvn clean test -DargLine="-javaagent:jacocoagent.jar=destfile=target/jacoco.exec,append=false"
            if [ $? -ne 0 ]; then
              echo "Tests failed"
              exit 1
            fi

      - name: Compile and Package Project
        run: mvn package #-X #-X 啟用Maven詳細log

      - name: Generate JaCoCo Report
        run: |
          java -jar jacococli.jar report \
            target/jacoco.exec \
            --classfiles target/classes/org/example/HelloWorld.class \
            --sourcefiles src/main/java/org/example/HelloWorld.java \
            --html target/site/jacoco

      - name: Upload JaCoCo Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/
          retention-days: 1

      ##deploy flow start
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
              ${{ runner.os }}-buildx-

      - name: Build and Push Docker image
        run: |
              docker buildx create --use
              docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache \
                                  --cache-to=type=local,dest=/tmp/.buildx-cache \
                                  --push \
                                  -t ${{ env.ECR_REPO }}:latest .
              if [ $? -ne 0 ]; then
                echo "Docker push failed"
                exit 1
              fi

      - name: Deploy to Lambda
        if: ${{ vars.UPDATE_LAMBDA == 'true' }}
        run: |
          aws lambda update-function-code \
            --function-name github_pipeline_docker_Img \
            --image-uri ${{ env.ECR_REPO }}:latest
          if [ $? -ne 0 ]; then
            echo "Lambda deployment failed"
            exit 1
          fi